<xml>
    <lang type="c++">
        <includes>
            <file name="libpq-fe.h" />
        </includes>
        <global_functions>
            <function>
                <![CDATA[
                class PQResult
                {
                private:
                    PGresult    *m_res;

                public:
                    PQResult(): m_res(0) {}
                    PQResult(PGresult *_res): m_res(_res) {}
                    ~PQResult() { if (m_res) PQclear(m_res); }

                    const PGresult* get() const { return m_res; }

                    void operator=(PGresult *_res)
                    {
                        if (m_res)
                            PQclear(m_res);

                        m_res = _res;
                    }

                    void checkError(PGconn *_conn, ExecStatusType _statusCheck
                #ifndef NDEBUG
                        , const char* _file, int _line
                #endif
                        )
                    {
                        if (PQresultStatus(get()) != _statusCheck)
                        {
                #ifndef NDEBUG
                            FATAL(_file << ':' << _line << " - PostgreSQL: " << PQerrorMessage(_conn));
                #else
                            ASSERT_MSG("PostgreSQL: " << PQerrorMessage(_conn));
                #endif
                            abort();
                        }
                    }
                };
                ]]>
            </function>
        </global_functions>
        <types>
            <connection>
                <type value="PGconn*"/>
                <null value="NULL"/>
            </connection>
            <statement>
                <type value="PQResult"/>
                <null value="PQResult()"/>
            </statement>
        </types>
        <connect>
            <![CDATA[
            m_conn = PQconnectdbParams(keywords.data(), values.data(), 0);
            ASSERT_MSG(PQstatus(result) == CONNECTION_OK, "PostgreSQL connect error: " << PQerrorMessage(m_conn));
            ]]>
        </connect>
        <disconnect>
            PQfinish(m_conn);
        </disconnect>
        <select>
            <create>
            </create>
            <destroy>
            </destroy>
            <prepare>
                <![CDATA[
                m_stmt = PQprepare(m_conn, "%SELECT_NAME%", s_selectSQL, s_selectSQL_len, 0);
                PGCommandCheck(m_conn, m_stmt);
                ]]>
            </prepare>
            <fetch>
                <![CDATA[
                ]]>
            </fetch>
            <execute>
                <![CDATA[
                m_stmt = PQexecPrepared(conn, "%SELECT_NAME%", 1, paramValues, paramLengths, paramFormats, pqrfBinary);
                PGTuplesCheck(conn, m_stmt);
                ]]>
            </execute>
            <reset>
                m_stmt = PQResult();
            </reset>
        </select>

        <insert>
            <create>
            </create>
            <destroy>
            </destroy>
            <prepare>
            </prepare>
            <execute>
            </execute>
            <reset>
            </reset>
        </insert>

        <update>
            <create>
            </create>
            <destroy>
            </destroy>
            <prepare>
            </prepare>
            <execute>
            </execute>
            <reset>
            </reset>
        </update>

        <delete>
            <create>
            </create>
            <destroy>
            </destroy>
            <prepare>
            </prepare>
            <execute>
            </execute>
            <reset>
            </reset>
        </delete>

    </lang>
</xml>
