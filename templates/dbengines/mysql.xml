<xml>
	<lang type="c++">
		<includes>
			<file name="mysql/mysql.h" />
			<file name="mysql/errmsg.h" />
		</includes>
		<global_functions>
			<function>
				void mysqlCheckStmtErr( MYSQL_STMT *_stmt, int _status )
				{
					if ( _status )
					{
						switch( _status )
						{
							case CR_COMMANDS_OUT_OF_SYNC:
								ASSERT_MSG( false, "Commands were executed in an improper order." );
								break;
							case CR_OUT_OF_MEMORY:
								ASSERT_MSG( false, "Out of memory." );
								break;
							case CR_SERVER_GONE_ERROR:
								ASSERT_MSG( false, "The MySQL server has gone away." );
								break;
							case CR_SERVER_LOST:
								ASSERT_MSG( false, "The m_connection to the server was lost during the query." );
								break;
							case CR_UNKNOWN_ERROR:
								ASSERT_MSG( false, "An unknown error occurred." );
								break;
							case CR_UNSUPPORTED_PARAM_TYPE:
								ASSERT_MSG( false, "The buffer type is MYSQL_TYPE_DATE, MYSQL_TYPE_TIME, MYSQL_TYPE_DATETIME, or MYSQL_TYPE_TIMESTAMP, but the data type is not DATE, TIME, DATETIME, or TIMESTAMP." );
								break;
						}
						
						ASSERT_MSG( false, "MySQL: " &lt;&lt; mysql_stmt_error(_stmt) );
						exit(-1);
					}
				}
			</function>
		</global_functions>
		<types>
			<connection>
				<type value="MYSQL*"/>
				<null value="0"/>
			</connection>
			<statement>
				<type value="MYSQL_STMT*"/>
				<null value="0"/>
			</statement>
		</types>
		<connect>
			m_conn = mysql_init(0);
			m_conn = mysql_real_connect(m_conn, s_dbparam_host, s_dbparam_user, s_dbparam_password, s_dbparam_db, s_dbparam_port, 0, CLIENT_COMPRESS);
			ASSERT_MSG( m_conn, "Unable to connect to:" &lt;&lt; s_dbparam_host );
		</connect>
		<disconnect>
			mysql_close(m_conn);
		</disconnect>
		<select>
			<create>
				m_selectStmt = mysql_stmt_init( m_conn );
			</create>
			<destroy>
				mysql_stmt_close(m_selectStmt);
			</destroy>
			<prepare>
				mysqlCheckStmtErr( m_selectStmt, mysql_stmt_prepare(m_selectStmt, s_selectSQL, s_selectSQL_len) );
			</prepare>
			<fetch>
				int ret = mysql_stmt_fetch(m_selectStmt);
				
				switch( ret )
				{
					case 0:
						m_currentRow.reset( new _row_type( this ));
						return true;
					case MYSQL_NO_DATA:
						m_currentRow.reset();
						break;
					default:
						mysqlCheckStmtErr( m_selectStmt, ret );
						break;
				}
				
				return false;
			</fetch>
			<execute>
				mysqlCheckStmtErr( m_selectStmt, mysql_stmt_bind_param(m_selectStmt, selInBuffer));
				mysqlCheckStmtErr( m_selectStmt, mysql_stmt_execute(m_selectStmt));
				mysqlCheckStmtErr( m_selectStmt, mysql_stmt_bind_result(m_selectStmt, selOutBuffer));
			</execute>
		</select>
	</lang>
</xml>
