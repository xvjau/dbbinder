<xml>
	<lang type="c++">
		<includes>
			<file name="ibase.h" />
		</includes>
		<global_functions>
			<function>
				static __thread ISC_STATUS err[32];
				
				static void printError()
				{
					const ISC_STATUS *p = err;
					char str[512];
					std::string	errMessage;

					while ( fb_interpret( str, 512, &amp;p ) )
					{
						errMessage += str + '\n';
					}
					ASSERT_MSG( false, errMessage );
				};

				inline void checkFBError()
				{
					if ( err[0] == 1 &amp;&amp; err[1] )
						printError();
				};
			</function>
			<function>
				template&lt;typename P, typename T&gt; void add_dbd_param(P *&amp;_dpb, T _param)
				{
					*_dpb++ = _param;
				}
			</function>
			<function>
				template&lt;typename P, typename T&gt; void add_dbd_string(P *&amp;_dpb, T _param, const char *_str)
				{
					unsigned int _strLength = strlen(_str);
					if ( _strLength &lt; 256 )
					{
						*_dpb++ = _param;
						*_dpb++ = _strLength;
						
						for ( const char *q = _str; *q; )
							*_dpb++ = *q++;
					}
				}
			</function>
		</global_functions>
		<types>
			<connection>
				<type value="isc_db_handle"/>
				<null value="0"/>
			</connection>
			<statement>
				<type value="isc_stmt_handle"/>
				<null value="0"/>
			</statement>
			<transaction>
				<type value="isc_tr_handle"/>
				<null value="0"/>
				<name value="m_tr" />
			</transaction>
		</types>
		<connect>
			{
				char dpb [1024];
				char *p = dpb;
				
				add_dbd_param(p, isc_dpb_version1);
				add_dbd_string(p, isc_dpb_user_name, s_dbparam_user);
				add_dbd_string(p, isc_dpb_password, s_dbparam_password);
				add_dbd_string(p, isc_dpb_sql_role_name, s_dbparam_role);
				add_dbd_string(p, isc_dpb_lc_ctype, s_dbparam_charset);
			
				int dpbLength = p - dpb;
				
				isc_attach_database( err, strlen(s_dbparam_db), const_cast&lt;char*&gt;(s_dbparam_db), &amp;m_conn, dpbLength, dpb );
				checkFBError();
			}
		</connect>
		<disconnect>
			isc_detach_database( err, &amp;m_conn );
		</disconnect>
		<select>
			<create>
				isc_dsql_alloc_statement2( err, &amp;m_conn, &amp;m_selectStmt );
				checkFBError();
			</create>
			<destroy>
				isc_dsql_free_statement( err, &amp;m_selectStmt, DSQL_drop );
				checkFBError();
			</destroy>
			<prepare>
				isc_dsql_prepare( err, &amp;m_tr, &amp;m_selectStmt, s_selectSQL_len, const_cast&lt;char*&gt;(s_selectSQL), 3, m_selOutBuffer );
				checkFBError();
			</prepare>
			<fetch>
			</fetch>
			<reset>
			</reset>
		</select>
	</lang>
</xml>
