<xml>
	<lang type="c++">
		<includes>
			<file name="sqlite3.h" />
		</includes>
		<extra_headers>
			<define>
				#define SQLCHECK( FN ) if( FN != SQLITE_OK ) { std::cerr &lt;&lt; basename(__FILE__) &lt;&lt; ':' &lt;&lt; __LINE__ &lt;&lt; " SQL error: " &lt;&lt; sqlite3_errmsg(m_conn) &lt;&lt; std::endl; assert(false); };
			</define>
		</extra_headers>
		<types>
			<connection>
				<type value="sqlite3*"/>
				<null value="0"/>
			</connection>
			<statement>
				<type value="sqlite3_stmt*"/>
				<null value="0"/>
			</statement>
		</types>
		<connect>
			SQLCHECK( sqlite3_open(_file, &amp;m_conn) );
		</connect>
		<disconnect>
			sqlite3_close( m_conn );
		</disconnect>
		<select>
			<create>
			</create>
			<destroy>
				sqlite3_finalize( m_selectStmt );
			</destroy>
			<prepare>
				{
					const char *tail;
					SQLCHECK( sqlite3_prepare(m_conn, s_selectSQL, s_selectSQL_len, &amp;m_selectStmt,  &amp;tail ));
				}
			</prepare>
			<fetch>
				int ret = sqlite3_step( m_selectStmt );
				switch ( ret )
				{
					case SQLITE_ROW:
					{
						m_currentRow.reset( new _row_type( this ));
						return true;
					}
					case SQLITE_MISUSE: /* This seems to indicate empty result */
					case SQLITE_DONE:
					{
						m_currentRow.reset();
						return false;
					}
					default:
					{
						m_currentRow.reset();
						std::cerr &lt;&lt; "SQL error: " &lt;&lt; sqlite3_errmsg(m_conn) &lt;&lt; std::endl;
						return false;
					}
				}
			</fetch>
			<reset>
				SQLCHECK( sqlite3_reset(m_selectStmt));
			</reset>
		</select>
		<update>
			<create>
			</create>
			<destroy>
				sqlite3_finalize( m_updateStmt );
			</destroy>
			<prepare>
				{
					const char *tail;
					SQLCHECK( sqlite3_prepare(m_conn, s_updateSQL, s_updateSQL_len, &amp;m_updateStmt,  &amp;tail ));
				}
			</prepare>
			<execute>
				SQLCHECK( sqlite3_step( m_updateStmt ) );
			</execute>
			<reset>
				SQLCHECK( sqlite3_reset(m_updateStmt));
			</reset>
		</update>
		<insert>
			<create>
			</create>
			<destroy>
				sqlite3_finalize( m_insertStmt );
			</destroy>
			<prepare>
				{
					const char *tail;
					SQLCHECK( sqlite3_prepare(m_conn, s_insertSQL, s_insertSQL_len, &amp;m_insertStmt,  &amp;tail ));
				}
			</prepare>
			<execute>
				SQLCHECK( sqlite3_step( m_insertStmt ) );
			</execute>
			<reset>
				SQLCHECK( sqlite3_reset(m_insertStmt));
			</reset>
		</insert>
	</lang>
</xml>
